import type React from 'react';
import { useState, useEffect } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  CardElement,
  PaymentRequestButtonElement,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';

// Load Stripe outside of a component's render to avoid
// recreating the Stripe object on every render.
const getStripePublishableKey = () => {
  const key = import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY;

  if (!key || key.includes('YOUR_ACTUAL_PUBLISHABLE_KEY_HERE') || key.includes('your_live_publishable_key_here') || key.includes('your_actual_key_here')) {
    console.log('Using demo Stripe key for testing - configure real keys for live payments');
    // Return a demo key that allows the payment form to work
    return 'pk_test_demo_key_for_testing_payment_flow_only';
  }

  console.log('Using real Stripe for payment processing');
  return key;
};

const stripePromise = loadStripe(getStripePublishableKey());

interface StripePaymentFormProps {
  amount: number;
  email: string;
  description: string;
  onPaymentSuccess: () => void;
  onPaymentError?: (error: string) => void;
}

const CheckoutForm: React.FC<StripePaymentFormProps> = ({
  amount,
  email,
  description,
  onPaymentSuccess,
  onPaymentError
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [isLoading, setIsLoading] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  const [paymentRequest, setPaymentRequest] = useState<any>(null);
  const [canMakePayment, setCanMakePayment] = useState(false);
  const [selectedMethod, setSelectedMethod] = useState<'card' | 'digital'>('digital');

  // Create payment intent function
  const createPaymentIntent = async () => {
    console.log('Creating payment intent...');

    const response = await fetch('/.netlify/functions/create-payment-intent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: Math.round(amount * 100), // Convert to cents
        email: email,
        description: description,
        currency: 'usd'
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Payment intent response error:', response.status, errorText);
      let errorData;
      try {
        errorData = JSON.parse(errorText);
      } catch {
        errorData = { error: errorText };
      }
      throw new Error(errorData.error || `Failed to create payment intent (${response.status}): ${errorText}`);
    }

    const { client_secret } = await response.json();
    console.log('Payment intent created successfully');
    return client_secret;
  };

  // Initialize Payment Request API for Apple Pay / Google Pay
  useEffect(() => {
    if (stripe) {
      const pr = stripe.paymentRequest({
        country: 'US',
        currency: 'usd',
        total: {
          label: description,
          amount: Math.round(amount * 100),
        },
        requestPayerName: true,
        requestPayerEmail: true,
      });

      // Check if Payment Request is available
      pr.canMakePayment().then(result => {
        if (result) {
          setPaymentRequest(pr);
          setCanMakePayment(true);
        }
      });

      // Handle payment method event
      pr.on('paymentmethod', async (ev) => {
        try {
          setIsLoading(true);
          const client_secret = await createPaymentIntent();

          // Check if this is a demo payment
          if (client_secret === 'pi_demo_mock_payment_intent_secret') {
            console.log('Demo mode: Simulating digital wallet payment...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            console.log(`Demo digital wallet payment successful for ${email}, amount: ${amount}`);
            ev.complete('success');
            onPaymentSuccess();
            return;
          }

          // Process real payment

          // Confirm the PaymentIntent without handling next actions
          const { error: confirmError } = await stripe.confirmCardPayment(
            client_secret,
            { payment_method: ev.paymentMethod.id },
            { handleActions: false }
          );

          if (confirmError) {
            ev.complete('fail');
            setPaymentError(confirmError.message || 'Payment failed');
            onPaymentError?.(confirmError.message || 'Payment failed');
          } else {
            ev.complete('success');
            console.log('Digital wallet payment succeeded!');
            onPaymentSuccess();
          }
        } catch (error) {
          console.error('Digital wallet payment error:', error);
          ev.complete('fail');
          const errorMessage = error instanceof Error ? error.message : 'Payment failed';
          setPaymentError(errorMessage);
          onPaymentError?.(errorMessage);
        } finally {
          setIsLoading(false);
        }
      });
    }
  }, [stripe, amount, description, email, onPaymentSuccess, onPaymentError]);

  // Handle traditional card payment
  const handleCardPayment = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    setIsLoading(true);
    setPaymentError(null);

    const cardElement = elements.getElement(CardElement);

    if (!cardElement) {
      setPaymentError('Card element not found');
      setIsLoading(false);
      return;
    }

    try {
      const client_secret = await createPaymentIntent();

      // Check if this is a demo payment
      if (client_secret === 'pi_demo_mock_payment_intent_secret') {
        console.log('Demo mode: Simulating card payment processing...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log(`Demo card payment successful for ${email}, amount: ${amount}`);
        onPaymentSuccess();
        return;
      }

      // Process real payment with Stripe

      // Confirm payment with Stripe
      const { error: confirmError } = await stripe.confirmCardPayment(client_secret, {
        payment_method: {
          card: cardElement,
          billing_details: {
            email: email,
          },
        },
      });

      if (confirmError) {
        setPaymentError(confirmError.message || 'Payment failed');
        onPaymentError?.(confirmError.message || 'Payment failed');
      } else {
        console.log('Card payment succeeded!');
        onPaymentSuccess();
      }
    } catch (error) {
      console.error('Card payment error:', error);
      const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
      setPaymentError(errorMessage);
      onPaymentError?.(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const cardElementOptions = {
    style: {
      base: {
        fontSize: '16px',
        color: '#424770',
        '::placeholder': {
          color: '#aab7c4',
        },
        fontFamily: 'system-ui, -apple-system, sans-serif',
      },
      invalid: {
        color: '#9e2146',
      },
    },
    hidePostalCode: false,
  };

  return (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-lg border">
        <h3 className="text-lg font-semibold mb-4">üí≥ Payment Information</h3>

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <p className="text-blue-800 text-sm">
            üöÄ <strong>Demo Mode:</strong> This is a test payment system. Real Stripe keys are not configured yet, so no actual charges will be made. Configure your Stripe API keys to enable real payment processing.
          </p>
        </div>

        {/* Payment Method Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Choose Payment Method
          </label>
          <div className="grid grid-cols-2 gap-3">
            {canMakePayment && (
              <button
                type="button"
                onClick={() => setSelectedMethod('digital')}
                className={`p-3 border rounded-lg text-center transition-colors ${
                  selectedMethod === 'digital'
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-300 hover:border-gray-400'
                }`}
              >
                <div className="text-2xl mb-1">üì±</div>
                <div className="text-sm font-medium">Digital Wallets</div>
                <div className="text-xs text-gray-500">Apple Pay, Google Pay</div>
              </button>
            )}
            <button
              type="button"
              onClick={() => setSelectedMethod('card')}
              className={`p-3 border rounded-lg text-center transition-colors ${
                selectedMethod === 'card'
                  ? 'border-blue-500 bg-blue-50 text-blue-700'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              <div className="text-2xl mb-1">üí≥</div>
              <div className="text-sm font-medium">Credit Card</div>
              <div className="text-xs text-gray-500">Visa, Mastercard, etc.</div>
            </button>
          </div>
        </div>

        {/* Digital Wallet Payment */}
        {selectedMethod === 'digital' && canMakePayment && paymentRequest && (
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üçé Apple Pay / ü§ñ Google Pay
            </label>
            <div className="border rounded-lg p-3">
              <PaymentRequestButtonElement
                options={{ paymentRequest }}
                className="w-full"
              />
            </div>
            <p className="text-xs text-gray-500 mt-1">
              Secure payment with your device's built-in authentication
            </p>
          </div>
        )}

        {/* Card Payment Form */}
        {selectedMethod === 'card' && (
          <form onSubmit={handleCardPayment} className="space-y-4">
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                üí≥ Card Details
              </label>
              <div className="border rounded-md p-3">
                <CardElement options={cardElementOptions} />
              </div>
              <p className="text-xs text-gray-500 mt-1">
                Test with card number: 4242 4242 4242 4242
              </p>
            </div>

            <button
              type="submit"
              disabled={!stripe || isLoading}
              className="w-full bg-blue-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isLoading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Processing...
                </div>
              ) : (
                `Pay $${amount.toFixed(2)} with Card`
              )}
            </button>
          </form>
        )}

        {/* Show digital wallet option if not available */}
        {selectedMethod === 'digital' && !canMakePayment && (
          <div className="mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div className="flex items-center">
              <div className="text-yellow-600 mr-2">‚ö†Ô∏è</div>
              <div>
                <h4 className="text-sm font-medium text-yellow-800">Digital Wallets Not Available</h4>
                <p className="text-sm text-yellow-700 mt-1">
                  Apple Pay and Google Pay are not available on this device or browser. Please use a credit card instead.
                </p>
              </div>
            </div>
            <button
              onClick={() => setSelectedMethod('card')}
              className="mt-3 text-sm bg-yellow-100 hover:bg-yellow-200 text-yellow-800 px-3 py-1 rounded transition-colors"
            >
              Switch to Credit Card
            </button>
          </div>
        )}

        {/* Error Display */}
        {paymentError && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-red-600 text-sm">{paymentError}</p>
          </div>
        )}

        {/* Total Amount */}
        <div className="bg-gray-50 p-3 rounded-md">
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-600">Total Amount:</span>
            <span className="font-semibold">${amount.toFixed(2)}</span>
          </div>
        </div>

        {/* Security Note */}
        <div className="mt-4 text-center">
          <p className="text-xs text-gray-500">
            üîí Your payment information is secure and encrypted. We use industry-standard security measures.
          </p>
        </div>
      </div>
    </div>
  );
};

const StripePaymentForm: React.FC<StripePaymentFormProps> = (props) => {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm {...props} />
    </Elements>
  );
};

export default StripePaymentForm;
